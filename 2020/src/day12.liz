;; -*- clojure -*-
(const std (@import "std"))
(const print (.. std -debug -print))
(const utils (@import "utils.zig"))

(defn ^!isize part1 [^"[][]const u8" lines]
  (var ^isize v 0)
  (var ^isize h 0)
  (var ^isize d 90)
  (for [line lines]
    (var n (utils.parseInt isize (slice line 1)))
    (case (aget line 0)
      \N (do (+= v n))
      \S (do (-= v n))
      \E (do (+= h n))
      \W (do (-= h n))
      \L (do (set! d (-> d (+ 360) (- n) (rem 360))))
      \R (do (set! d (-> d (+ n) (rem 360))))
      \F (case d
           0 (do (+= v n))
           180 (do (-= v n))
           90 (do (+= h n))
           270 (do (-= h n))
           (unreachable))
      (unreachable)))
  (var va (try (std.math.absInt v)))
  (var ha (try (std.math.absInt h)))
  (return (+ va ha)))

(defn ^!isize part2 [^"[][]const u8" lines]
  (var ^isize v 0)
  (var ^isize h 0)
  (var ^isize wv 1)
  (var ^isize wh 10)
  (for [line lines]
    (var n (utils.parseInt isize (slice line 1)))
    (case (aget line 0)
      \N (do (+= wv n))
      \S (do (-= wv n))
      \E (do (+= wh n))
      \W (do (-= wh n))
      \L (dotimes [i (@divFloor n 90)]
           (var t wh)
           (set! wh (- wv))
           (set! wv t))
      \R (dotimes [i (@divFloor n 90)]
           (var t wv)
           (set! wv (- wh))
           (set! wh t))
      \F (do (+= v (* n wv))
             (+= h (* n wh)))
      (unreachable)))
  (var va (try (std.math.absInt v)))
  (var ha (try (std.math.absInt h)))
  (return (+ va ha)))

(defn ^:pub ^!void main []
  (var lines (utils.readFileLines "inputs/day12.txt"))
  (print "{}\n" [(part1 lines)])
  (print "{}\n" [(part2 lines)]))
