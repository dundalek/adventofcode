;; -*- clojure -*-
(const std (@import "std"))
(const print (.. std -debug -print))
(const utils (@import "utils.zig"))

(defn ^!isize part1 [^"[][]const u8" lines]
  (var ^isize v 0)
  (var ^isize h 0)
  (var ^isize d 90)
  (for [line lines]
    (var n (utils.parseInt isize (slice line 1)))
    (case (aget line 0)
      \N (+= v n)
      \S (-= v n)
      \E (+= h n)
      \W (-= h n)
      \L (set! d (-> d (+ 360) (- n) (rem 360)))
      \R (set! d (-> d (+ n) (rem 360)))
      \F (case d
           0 (+= v n)
           180 (-= v n)
           90 (+= h n)
           270 (-= h n)
           (unreachable))
      (unreachable)))
  (return (+ (try (std.math.absInt v))
             (try (std.math.absInt h)))))

(defn ^!isize part2 [^"[][]const u8" lines]
  (var ^isize v 0)
  (var ^isize h 0)
  (var ^isize wv 1)
  (var ^isize wh 10)
  (for [line lines]
    (var n (utils.parseInt isize (slice line 1)))
    (case (aget line 0)
      \N (+= wv n)
      \S (-= wv n)
      \E (+= wh n)
      \W (-= wh n)
      \L (dotimes [i (@divFloor n 90)]
           (var t wh)
           (set! wh (- wv))
           (set! wv t))
      \R (dotimes [i (@divFloor n 90)]
           (var t wv)
           (set! wv (- wh))
           (set! wh t))
      \F (do (+= v (* n wv))
             (+= h (* n wh)))
      (unreachable)))
  (return (+ (try (std.math.absInt v))
             (try (std.math.absInt h)))))

(defn ^:pub ^!void main []
  (var lines (utils.readFileLines "inputs/day12.txt"))
  (print "{}\n" [(part1 lines)])
  (print "{}\n" [(part2 lines)]))
