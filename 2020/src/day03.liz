;; -*- clojure -*-
(const std (@import "std"))
(const print (.. std -debug -print))
(const utils (@import "utils.zig"))

(defn ^usize part1 [^"[][]const u8" lines ^usize right ^usize down]
  (var ^usize row 0)
  (var ^usize col 0)
  (var ^usize count 0)

  (while (< row lines.len)
    (var line (aget lines row))
    (when (= (aget line (% col line.len)) \#)
      (+= count 1))
    (+= col right)
    (+= row down))

  (return count))

(defn ^usize part2 [^"[][]const u8" lines ^"[][2]usize" slopes]
  (var ^usize result 1)
  (for [slope slopes]
    (*= result (part1 lines (aget slope 0) (aget slope 1))))
  (return result))

(defn ^:pub ^void main []
  (var lines (utils.readFileLines "inputs/day03.txt"))

  (print "{}\n" [(part1 lines 3 1)])

  (var slopes ^"[_][2]usize"
    [[1 1]
     [3 1]
     [5 1]
     [7 1]
     [1 2]])
  (print "{}\n" [(part2 lines (slice slopes 0))]))
